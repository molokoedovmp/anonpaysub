import { NextRequest, NextResponse } from 'next/server'
import { Buffer } from 'buffer'
import crypto from 'crypto'
import { sendTelegramMessage } from '@/lib/telegram'

export const runtime = 'nodejs'

export async function POST(req: NextRequest) {
  try {
    const shopId = process.env.YOOKASSA_SHOP_ID
    const key = process.env.YOOKASSA_KEY
    const allowNoAuth = process.env.YOOKASSA_WEBHOOK_ALLOW_NO_AUTH === '1'
    const token = process.env.YOOKASSA_WEBHOOK_TOKEN

    const auth = req.headers.get('authorization') || ''
    const xToken = req.headers.get('x-auth-token') || ''
    const expected = 'Basic ' + Buffer.from(`${shopId}:${key}`).toString('base64')
    if (!allowNoAuth && !(auth === expected || (token && xToken === token))) {
      return NextResponse.json({ error: 'unauthorized' }, { status: 401 })
    }

    const body = await req.json()
    const event = body?.event
    const obj = body?.object
    if (!event || !obj) return NextResponse.json({ ok: true })

    async function captureIfNeeded() {
      if (obj?.status === 'waiting_for_capture' || (obj?.status === 'pending' && obj?.paid === true)) {
        const idem = crypto.randomUUID()
        const r = await fetch(`https://api.yookassa.ru/v3/payments/${obj.id}/capture`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': expected,
            'Idempotence-Key': idem
          },
          body: JSON.stringify({ amount: obj.amount })
        })
        const d = await r.json().catch(() => ({}))
        return d?.status || obj.status
      }
      return obj?.status
    }

    const finalStatus = await captureIfNeeded()

    if (finalStatus === 'succeeded') {
      const botToken = process.env.BOT_TOKEN!
      const adminChatId = process.env.ADMIN_CHAT_ID!
      const md = obj?.metadata || {}
      const amount = obj?.amount?.value
      const lines = [
        'üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>',
        md.userId ? `<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> id=${md.userId}` : undefined,
        md.service ? `<b>üõí –°–µ—Ä–≤–∏—Å:</b> ${md.service}` : undefined,
        md.creator ? `<b>üîó –ê–≤—Ç–æ—Ä:</b> <code>${md.creator}</code>` : undefined,
        md.login ? `<b>üìß –õ–æ–≥–∏–Ω:</b> <code>${md.login}</code>` : undefined,
        md.password ? `<b>üîê –ü–∞—Ä–æ–ª—å:</b> <code>${md.password}</code>` : undefined,
        md.plan ? `<b>üìÖ –¢–∞—Ä–∏—Ñ:</b> ${md.plan}` : undefined,
        `<b>üí∞ –°—É–º–º–∞:</b> ${amount} RUB`,
        '',
        '–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.'
      ].filter(Boolean).join('\n')

      const payload: any = { chat_id: adminChatId, text: lines, parse_mode: 'HTML' }
      if (md.userId) {
        payload.reply_markup = { inline_keyboard: [
          [{ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', callback_data: `subscribed:${md.userId}:${Math.round(Number(amount||0))}` }],
          [{ text: '‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã', callback_data: `issue:${md.userId}` }]
        ] }
      }
      await sendTelegramMessage(botToken, adminChatId, payload)

      // –ú—è–≥–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
      if (md.userId) {
        const userMsg = (
          '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n' +
          '–í —Ç–µ—á–µ–Ω–∏–µ 15‚Äì60 –º–∏–Ω—É—Ç –º—ã –æ—Ñ–æ—Ä–º–∏–º –ø–æ–¥–ø–∏—Å–∫—É. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.'
        )
        await sendTelegramMessage(botToken, String(md.userId), userMsg)
      }
    }

    return NextResponse.json({ ok: true })
  } catch (e) {
    return NextResponse.json({ ok: true })
  }
}
