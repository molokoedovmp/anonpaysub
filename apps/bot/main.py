import asyncio
import contextlib
import math
from typing import Any, Dict, Union

import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    WebAppInfo,
)

from config import get_settings


pending_payments: Dict[str, asyncio.Task] = {}


PLAN_LABELS = {
    "1m": "1 –º–µ—Å—è—Ü",
    "3m": "3 –º–µ—Å—è—Ü–∞",
    "9m": "9 –º–µ—Å—è—Ü–µ–≤",
    "12m": "12 –º–µ—Å—è—Ü–µ–≤",
}
PLAN_CHOICES = [
    ("1m", "1 –º–µ—Å—è—Ü"),
    ("3m", "3 –º–µ—Å—è—Ü–∞"),
    ("9m", "9 –º–µ—Å—è—Ü–µ–≤"),
    ("12m", "12 –º–µ—Å—è—Ü–µ–≤"),
]
COMMISSION_PCT = 0.25  # legacy, not used in new formula


class OrderForm(StatesGroup):
    service = State()
    login = State()
    password = State()
    creator = State()
    plan = State()
    price = State()
    payment = State()
    notes = State()
    confirm = State()


def build_main_menu(webapp_url: str, support_url: str | None = None, privacy_url: str | None = None) -> InlineKeyboardMarkup:
    buttons = []
    if webapp_url.startswith("https://"):
        buttons.append([
            InlineKeyboardButton(
                text="–ú–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url)
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="–ú–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=webapp_url)
        ])
    buttons.append([
        InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –≤ —á–∞—Ç–µ", callback_data="chat:start")
    ])
    if support_url:
        buttons.append([InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_url)])
    else:
        buttons.append([InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support:open")])
    if privacy_url:
        buttons.append([InlineKeyboardButton(text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=privacy_url)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def plan_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=label, callback_data=f"chat:plan:{value}")]
        for value, label in PLAN_CHOICES
    ]
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="chat:cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def confirm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="chat:confirm")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="chat:restart")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="chat:cancel")],
        ]
    )


def payment_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data="chat:payment:yookassa")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="chat:cancel")],
        ]
    )


async def fetch_usd_rub_rate() -> float:
    urls = [
        "https://api.exchangerate.host/latest?base=USD&symbols=RUB",
        "https://open.er-api.com/v6/latest/USD",
    ]
    async with httpx.AsyncClient(timeout=10) as client:
        last_error: Exception | None = None
        for url in urls:
            try:
                res = await client.get(url)
                res.raise_for_status()
                data = res.json()
                if "rates" in data and "RUB" in data["rates"]:
                    rate = float(data["rates"]["RUB"])
                else:
                    rate = float(data.get("result"))
                if rate > 0:
                    return rate
            except Exception as exc:  # noqa: BLE001
                last_error = exc
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB: {last_error}")


def calc_totals(price_usd: float, plan: str, rate: float) -> Dict[str, float]:
    """Replicates mini-app pricing:
    final = ceil( ( usd * (fx + 4) * (1 + 0.03 + 0.001*usd) + 750 ) / 10 ) * 10
    where usd is total USD for the chosen plan (price_usd * months).
    """
    months_num = {
        "1m": 1,
        "3m": 3,
        "9m": 9,
        "12m": 12,
    }.get(plan, 1)
    total_usd = max(0.0, price_usd) * months_num
    delta_rate = 4
    fixed_fee = 750
    commission = 0.03 + 0.001 * total_usd
    base_rub = total_usd * (rate + delta_rate)
    price_with_commission = base_rub * (1.0 + commission)
    final_rub = math.ceil((price_with_commission + fixed_fee) / 10.0) * 10
    commission_rub = max(0, int(final_rub - base_rub))
    return {
        "months": months_num,
        "rate": rate,
        "base_usd": total_usd,
        "base_rub": base_rub,
        "commission_rub": commission_rub,
        "total_rub": int(final_rub),
    }


def format_user_summary(data: Dict[str, Any], calc: Dict[str, Any]) -> str:
    notes = data.get("notes")
    summary = [
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:",
        f"‚Ä¢ –°–µ—Ä–≤–∏—Å: {data['service']}",
        f"‚Ä¢ –ê–≤—Ç–æ—Ä: {data['creator']}",
        f"‚Ä¢ –õ–æ–≥–∏–Ω: {data['login']}",
        f"‚Ä¢ –ü–∞—Ä–æ–ª—å: {data['password']}",
        f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {PLAN_LABELS.get(data['plan'], data['plan'])}",
        f"‚Ä¢ –¶–µ–Ω–∞/–º–µ—Å: {data['price']} USD",
        f"‚Ä¢ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {calc['total_rub']:.0f} ‚ÇΩ",
        "‚Ä¢ –û–ø–ª–∞—Ç–∞: " + (
            'Telegram Pay' if data['payment'] == 'crypto'
            else '–ÆKassa' if data['payment'] == 'yookassa'
            else '–î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –ø–æ–∑–∂–µ'
        ),
    ]
    if notes:
        summary.append(f"‚Ä¢ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}")
    summary.append("\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ. –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.")
    return "\n".join(summary)


def build_paid_message(order: Dict[str, Any], calc: Dict[str, Any], tg_user) -> str:
    payment_method = (
        'Telegram Pay' if order['payment'] == 'crypto'
        else '–ÆKassa' if order['payment'] == 'yookassa'
        else '–î–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –ø–æ–∑–∂–µ'
    )
    full_name = tg_user.full_name if tg_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    user_id = tg_user.id if tg_user else 'n/a'
    username = tg_user.username if tg_user and tg_user.username else None
    user_line = f"{full_name} (id={user_id}{f', @{username}' if username else ''})"
    plan_label = PLAN_LABELS.get(order['plan'], order['plan'])
    months = calc.get('months')
    plan_text = f"{plan_label} ({months} –º–µ—Å.)" if months else plan_label

    def fmt(value: Union[float, int]) -> str:
        return f"{value:,.0f}".replace(',', ' ')

    base_rub = math.ceil(calc.get('base_rub', 0))
    commission_rub = int(calc.get('commission_rub', 0))
    total_rub = int(calc.get('total_rub', 0))
    commission_pct = int(round((commission_rub / base_rub) * 100)) if base_rub > 0 else 0

    lines = [
        'üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>',
        '',
        f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {user_line}",
        f"<b>üõí –°–µ—Ä–≤–∏—Å:</b> {order['service']}",
        order.get('creator') and f"<b>üîó –ê–≤—Ç–æ—Ä:</b> <code>{order['creator']}</code>",
        f"<b>üìß –õ–æ–≥–∏–Ω:</b> <code>{order['login']}</code>",
        f"<b>üîê –ü–∞—Ä–æ–ª—å:</b> <code>{order['password']}</code>",
        f"<b>üìÖ –¢–∞—Ä–∏—Ñ:</b> {plan_text}",
        f"<b>üíµ –¶–µ–Ω–∞/–º–µ—Å:</b> {order['price']} USD",
        f"<b>üßÆ –†–∞—Å—á—ë—Ç:</b> –±–∞–∑–∞ {fmt(base_rub)}‚ÇΩ + {fmt(commission_rub)}‚ÇΩ –∫–æ–º–∏—Å—Å–∏—è ({commission_pct}%)",
        total_rub and f"<b>üí∞ –ò—Ç–æ–≥–æ:</b> {fmt(total_rub)} ‚ÇΩ",
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞:</b> {payment_method}",
        order.get('notes') and f"<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {order['notes']}",
        '',
        '‚è∞ <b>–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</b>',
    ]
    return "\n".join([line for line in lines if line])


async def send_start_card(message: Message, settings) -> None:
    menu = build_main_menu(settings.webapp_url, settings.support_url, settings.privacy_url)
    text = (
        "<b>BazarPaySub</b>\n"
        "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–µ—Ä–≤–∏—Å—ã."
        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    )
    if settings.start_card_image_url:
        try:
            await message.answer_photo(
                settings.start_card_image_url,
                caption=text,
                reply_markup=menu,
                parse_mode="HTML",
            )
            return
        except Exception:  # noqa: BLE001
            pass
    await message.answer(text, reply_markup=menu, parse_mode="HTML")


async def main():
    settings = get_settings()
    bot = Bot(settings.bot_token)
    dp = Dispatcher()

    @dp.message(CommandStart())
    async def start(m: Message, state: FSMContext):
        await state.clear()
        await send_start_card(m, settings)

    @dp.message(Command("help"))
    async def help_cmd(m: Message, state: FSMContext):
        await state.clear()
        await send_start_card(m, settings)

    @dp.message(Command("support", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    async def support_cmd(m: Message, state: FSMContext):
        await state.clear()
        text = (
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ URL‚Äë–∫–Ω–æ–ø–∫—É.
        if settings.support_url:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=settings.support_url)]])
        else:
            # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∂–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="support:open")]])
        await m.answer(text, reply_markup=kb)

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    @dp.message(Command("privacy", "policy", "–ø–æ–ª–∏—Ç–∏–∫–∞"))
    async def privacy_cmd(m: Message, state: FSMContext):
        await state.clear()
        text = (
            "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–æ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∫–∞–∫ –∑–∞—â–∏—â–∞–µ–º ‚Äî –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ."
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É", url=settings.privacy_url)]]
        )
        await m.answer(text, reply_markup=kb)

    # –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ñ–æ–ª–±—ç–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏)
    @dp.callback_query(F.data == "support:open")
    async def support_open(call: CallbackQuery):
        await call.answer()
        url = settings.support_url or "https://t.me/aibazaru"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url=url)]])
        await call.message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=kb)

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º callback (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –≥–¥–µ‚Äë—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏)
    @dp.callback_query(F.data == "support:contact")
    async def support_contact(call: CallbackQuery):
        await call.answer()
        url = settings.support_url or "https://t.me/aibazaru"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url=url)]])
        await call.message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=kb)

    @dp.message(Command("cancel"))
    async def cancel_cmd(m: Message, state: FSMContext):
        await state.clear()
        await m.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ.", reply_markup=build_main_menu(settings.webapp_url, settings.support_url, settings.privacy_url))

    @dp.callback_query(F.data == "chat:cancel")
    async def cancel_cb(call: CallbackQuery, state: FSMContext):
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)
        await state.clear()
        with contextlib.suppress(Exception):
            await call.message.edit_reply_markup()
        await call.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=build_main_menu(settings.webapp_url, settings.support_url, settings.privacy_url))

    @dp.callback_query(F.data == "chat:restart")
    async def restart_cb(call: CallbackQuery, state: FSMContext):
        await call.answer()
        with contextlib.suppress(Exception):
            await call.message.edit_reply_markup()
        await state.clear()
        await start_chat_flow(call, state)

    async def start_chat_flow(call: CallbackQuery, state: FSMContext):
        await state.clear()
        await state.set_state(OrderForm.service)
        await call.message.answer(
            "–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤ —á–∞—Ç–µ.\n–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Chatgpt, Patreon, Lovable).\n\n–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel."
        )

    @dp.callback_query(F.data == "chat:start")
    async def chat_start(call: CallbackQuery, state: FSMContext):
        await call.answer()
        await start_chat_flow(call, state)

    @dp.message(OrderForm.service)
    async def service_step(m: Message, state: FSMContext):
        service = m.text.strip()
        await state.update_data(service=service)
        await state.set_state(OrderForm.login)
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:")

    @dp.message(OrderForm.login)
    async def login_step(m: Message, state: FSMContext):
        login = m.text.strip()
        if not login:
            await m.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
            return
        await state.update_data(login=login)
        await state.set_state(OrderForm.password)
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è):")

    @dp.message(OrderForm.password)
    async def password_step(m: Message, state: FSMContext):
        password = m.text.strip()
        if not password:
            await m.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        await state.update_data(password=password)
        await state.set_state(OrderForm.creator)
        await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–∏–≤ / –∞–≤—Ç–æ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É:")

    @dp.message(OrderForm.creator)
    async def creator_step(m: Message, state: FSMContext):
        creator = m.text.strip()
        await state.update_data(creator=creator)
        await state.set_state(OrderForm.plan)
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=plan_keyboard())

    @dp.callback_query(OrderForm.plan, F.data.startswith("chat:plan:"))
    async def plan_choice(call: CallbackQuery, state: FSMContext):
        await call.answer()
        plan = call.data.split(":")[-1]
        await state.update_data(plan=plan)
        await state.set_state(OrderForm.price)
        with contextlib.suppress(Exception):
            await call.message.edit_reply_markup()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü (USD):")

    @dp.message(OrderForm.plan)
    async def plan_text_prompt(m: Message):
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=plan_keyboard())

    @dp.message(OrderForm.price)
    async def price_step(m: Message, state: FSMContext):
        text = m.text.replace(',', '.').strip()
        try:
            price = float(text)
        except ValueError:
            await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 30 –∏–ª–∏ 29.99")
            return
        if price <= 0:
            await m.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        await state.update_data(price=price)
        await state.set_state(OrderForm.notes)
        await m.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'):")


    @dp.message(OrderForm.notes)
    async def notes_step(m: Message, state: FSMContext):
        notes_raw = m.text.strip()
        notes = '' if notes_raw in {'-', '–Ω–µ—Ç', '–ù–µ—Ç', 'no', 'No'} else notes_raw
        await state.update_data(notes=notes)

        data = await state.get_data()
        try:
            rate = await fetch_usd_rub_rate()
        except Exception as exc:  # noqa: BLE001
            await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB: {exc}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        calc = calc_totals(data['price'], data['plan'], rate)
        await state.update_data(calc=calc)
        await state.set_state(OrderForm.confirm)
        summary = format_user_summary(
            {
                "service": data['service'],
                "login": data['login'],
                "password": data['password'],
                "creator": data['creator'],
                "plan": data['plan'],
                "price": data['price'],
                "payment": 'yookassa',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ÆKassa
                "notes": notes,
            },
            calc,
        )
        await m.answer(summary, reply_markup=confirm_keyboard())

    @dp.callback_query(OrderForm.confirm, F.data == "chat:confirm")
    async def confirm_order(call: CallbackQuery, state: FSMContext):
        await call.answer()
        data = await state.get_data()
        calc = data['calc']
        await state.set_state(OrderForm.payment)
        with contextlib.suppress(Exception):
            await call.message.edit_reply_markup()
        await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard())

    @dp.callback_query(OrderForm.payment, F.data.startswith("chat:payment:"))
    async def payment_step(call: CallbackQuery, state: FSMContext):
        await call.answer()
        payment = call.data.split(":")[-1]
        data = await state.get_data()
        order = {
            "service": data['service'],
            "login": data['login'],
            "password": data['password'],
            "creator": data['creator'],
            "plan": data['plan'],
            "price": data['price'],
            "payment": payment,
            "notes": data.get('notes') or '',
        }
        calc = data['calc']
        await state.clear()
        with contextlib.suppress(Exception):
            await call.message.edit_reply_markup()

        if order['payment'] == 'yookassa':
            await call.message.answer("–°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –≤ –ÆKassa...")
            try:
                # –ë–µ—Ä—ë–º URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
                web_url = settings.payments_base_url
                
                async with httpx.AsyncClient(timeout=15) as client:
                    print(f"Creating payment via: {web_url}/api/yookassa/create")
                    resp = await client.post(
                        f"{web_url}/api/yookassa/create",
                        json={
                            # initData –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ ‚Äî –ø—Ä–æ–∫–∏–Ω–µ–º user id –≤ –∑–∞–∫–∞–∑
                            "order": {
                                "service": order['service'],
                                "login": order['login'],
                                "password": order['password'],
                                "creatorUrl": order['creator'],
                                "plan": order['plan'],
                                "monthlyPriceUsd": order['price'],
                                "notes": order['notes'],
                                "paymentMethod": 'yookassa',
                                "telegramUserId": call.from_user.id,
                                "telegramUser": {
                                    "id": call.from_user.id,
                                    "first_name": getattr(call.from_user, 'first_name', None),
                                    "last_name": getattr(call.from_user, 'last_name', None),
                                    "username": getattr(call.from_user, 'username', None),
                                },
                            }
                        },
                        headers={"Content-Type": "application/json"}
                    )
                print(f"Payment creation response: {resp.status_code}")
                data_resp = resp.json()
                print(f"Payment creation data: {data_resp}")
                if resp.status_code >= 400:
                    raise RuntimeError(data_resp.get('error') or '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂')
                payment_id = data_resp.get('paymentId')
                confirmation_url = data_resp.get('confirmationUrl')
                if not payment_id or not confirmation_url:
                    raise RuntimeError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ÆKassa')

                await call.message.answer(
                    f"–°—á—ë—Ç –Ω–∞ {int(calc['total_rub'])} ‚ÇΩ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —É–≤–µ–¥–æ–º–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", url=confirmation_url)]]
                    ),
                )

                async def poll_status():
                    try:
                        async with httpx.AsyncClient(timeout=15) as client:
                            attempts = 0
                            max_attempts = 24  # ~2 minutes at 5s interval
                            while True:
                                await asyncio.sleep(5)
                                print(f"Checking payment status: {payment_id}")
                                status_resp = await client.get(
                                    f"{web_url}/api/yookassa/{payment_id}",
                                    headers={"Content-Type": "application/json"}
                                )
                                print(f"Status check response: {status_resp.status_code}")
                                data_status = status_resp.json()
                                print(f"Status data: {data_status}")
                                if status_resp.status_code >= 400:
                                    print("Status check failed, breaking")
                                    break
                                status = data_status.get('status')
                                print(f"Payment status: {status}")
                                if status in {'succeeded', 'waiting_for_capture'}:
                                    admin_text = build_paid_message(order, calc, call.from_user)
                                    total_amount = int(calc.get('total_rub') or 0)
                                    keyboard = InlineKeyboardMarkup(
                                        inline_keyboard=[
                                            [InlineKeyboardButton(
                                                text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                                                callback_data=f"subscribed:{call.from_user.id}:{total_amount}"
                                            )],
                                            [InlineKeyboardButton(
                                                text="‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã",
                                                callback_data=f"issue:{call.from_user.id}"
                                            )]
                                        ]
                                    )
                                    await call.bot.send_message(
                                        settings.admin_chat_id,
                                        admin_text,
                                        parse_mode="HTML",
                                        reply_markup=keyboard
                                    )
                                    await call.message.answer(
                                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n–í —Ç–µ—á–µ–Ω–∏–µ 15‚Äì60 –º–∏–Ω—É—Ç –º—ã –æ—Ñ–æ—Ä–º–∏–º –ø–æ–¥–ø–∏—Å–∫—É."
                                    )
                                    break
                                if status == 'canceled':
                                    await call.message.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
                                    break
                                attempts += 1
                                if attempts >= max_attempts:
                                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å ‚Äî —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
                                    await call.message.answer(
                                        "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                                    )
                                    break
                    finally:
                        pending_payments.pop(payment_id, None)

                pending_payments[payment_id] = asyncio.create_task(poll_status())
            except Exception as exc:  # noqa: BLE001
                await call.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {exc}")
            return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        admin_text = build_paid_message(order, calc, call.from_user)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                    callback_data=f"subscribed:{call.from_user.id}:{int(calc['total_rub'])}"
                )],
                [InlineKeyboardButton(
                    text="‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã",
                    callback_data=f"issue:{call.from_user.id}"
                )]
            ]
        )
        await call.bot.send_message(
            settings.admin_chat_id,
            admin_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await call.message.answer(
            f"–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ: {calc['total_rub']:.0f} ‚ÇΩ. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )

    @dp.callback_query(OrderForm.confirm, F.data == "chat:restart")
    async def confirm_restart(call: CallbackQuery, state: FSMContext):
        await call.answer()
        await start_chat_flow(call, state)

    @dp.callback_query(F.data.startswith("paidnotify:"))
    async def paid_notify_legacy(call: CallbackQuery):
        with contextlib.suppress(Exception):
            await call.answer()
        payload = call.data.split(":")
        user_id = None
        total = None
        if len(payload) >= 2:
            try:
                user_id = int(payload[1])
            except Exception:
                user_id = None
        if len(payload) >= 3:
            try:
                total = int(payload[2])
            except Exception:
                total = None

        sent = False
        if user_id:
            message_text = (
                "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                "‚è∞ –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì60 –º–∏–Ω—É—Ç."
            )
            if total and total > 0:
                message_text = (
                    "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: {total} ‚ÇΩ\n"
                    "‚è∞ –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì60 –º–∏–Ω—É—Ç."
                )
            try:
                await call.bot.send_message(user_id, message_text, parse_mode="HTML")
                sent = True
            except Exception:
                sent = False

        base_text = call.message.html_text or call.message.text or ''
        status_line = '‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.' if sent else '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–∏—Å–∞–ª –ª–∏ –æ–Ω –±–æ—Ç—É).'
        try:
            await call.message.edit_text(
                base_text + '\n\n' + status_line,
                parse_mode='HTML'
            )
        except Exception:
            pass

        if not sent:
            await call.message.answer('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')

    @dp.callback_query(F.data.startswith("subscribed:"))
    async def subscribed_cb(call: CallbackQuery):
        with contextlib.suppress(Exception):
            await call.answer()
        parts = call.data.split(":")
        user_id = int(parts[1]) if len(parts) > 1 else None
        total = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None
        if user_id:
            text = (
                "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                + (f"üí∞ –°—É–º–º–∞: {total} ‚ÇΩ\n" if total else "")
                + "–•–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
            )
            with contextlib.suppress(Exception):
                await call.bot.send_message(user_id, text, parse_mode="HTML")
        with contextlib.suppress(Exception):
            await call.message.edit_text((call.message.html_text or call.message.text or '') + "\n\n‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.", parse_mode='HTML')

    @dp.callback_query(F.data.startswith("issue:"))
    async def issue_cb(call: CallbackQuery):
        with contextlib.suppress(Exception):
            await call.answer()
        parts = call.data.split(":")
        user_id = int(parts[1]) if len(parts) > 1 else None
        if user_id:
            text = (
                "‚ö†Ô∏è <b>–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –æ—Ç–≤–µ—Ç–∏–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ–∂–µ–º."
            )
            with contextlib.suppress(Exception):
                await call.bot.send_message(user_id, text, parse_mode="HTML")
        with contextlib.suppress(Exception):
            await call.message.edit_text((call.message.html_text or call.message.text or '') + "\n\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.", parse_mode='HTML')

    @dp.message(OrderForm.payment)
    async def payment_text_prompt(m: Message):
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=payment_keyboard())

    @dp.message()
    async def fallback(m: Message, state: FSMContext):
        if await state.get_state() is not None:
            await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.")
        else:
            await send_start_card(m, settings)

    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
